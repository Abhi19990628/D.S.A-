class Node():
    def __init__(self , item =None, next=None):
        self.item=item
        self.next=next
class Singlelist:
    def __init__(self, start=None):
        self.start=start
    def is_empty(self):
        if self.start is None:
            return None
    def insert_first(self,data):
        N=Node(data,self.start)
        self.start=N
    def insert_last(self,data):
        N=Node(data)
        if not self.is_empty():
            temp=self.start
            while temp.next is not None:
                temp.next
            temp.next=N        
        else:
            self.start=N
            
    def print_list(self):
        temp=self.start
        while temp is not None:
            print(temp.item, end="")
        temp=temp.next
        
mylist=Singlelist()
mylist.insert_first(40)
mylist.insert_first(30)
mylist.insert_first(20)
mylist.insert_first(10)
mylist.insert_last(50)
mylist.print_list()


def bubble_sort(array):
    for l in range(1 ,len (array)):
        for i in range(len(array)-l):
            if array[i]>array[i+1]:
                array[i],array[i+1]=array[i+1],array[i]
array=[23,11,21,211,112,42,33]
bubble_sort(array)
print(array)

def bubble_sort(array):
    for l in range(1,len(array)):
        for i in range(len(array)-l):
            if array[i]>array[i+1]:
                array[i],array[i+1]=array[i+1],array[i]
array=[1,2322,232,13,144,23,24,11,21,22]
bubble_sort(array)
print(array)

def find_maxvalue(array):
    l=array[0]
    for i in range(len(array)):
        if array[i]>l:
            l=array[i]
    return l
array=[2,23,22,222,3221,221]
print(find_maxvalue(array))

def find_minivalue(array):
    l=array[0]
    for i in range(len(array)):
        if array[i]<l:
            l=array[i]
    return l
array=[2,33,44,55,66,23]
print(find_minivalue(array))
        
def swap_array(array,first,secound):
        temp=array[first]
        array[first]=array[secound]
        array[secound]=temp
array=[1,2,3,4,5,6]
swap_array(array ,1,3)
print(array)

def swap(array,fir,sec):
    array[fir],array[sec]=array[sec],array[fir]
array=[1,2,3,4,5,6]
swap(array, 2 ,4)
print(array)

def liner_search(array, target):
    for i in range(len(array)):
        if array[i]==target:
            return i
    return -1
arr=[1,22,33,443,54,36,37,34,33,33,2,3,34,43,2,2,3]
tar=43
index=liner_search(arr,tar)
if index !=-1:
    print(f"target value {tar} find index of {index}")
else:
    print(f"target value is not in array sorry")
    
def sum_array(array):
    sum=0
    for i in range(len(array)):
        sum+=array[i]
    return sum
arr=[1,2,3,4,5]
print(sum_array(arr))

def mul_array(array):
    mul=1
    for i in range(len(array)):
        mul*=array[i]
    return mul
arr=[1,2,3,4]
print(mul_array(arr))

def reverse_array(array):
    start=0
    last=len(array)-1
    while start<last:
        arr[start],arr[last]=arr[last],arr[start]
        start+=1
        last-=1
arr=[1,2,3,4,5]
print("original array:",arr)
reverse_array(arr)
print("reverse array :",arr)

def duplicate(array):
    x = []
    y = []
    for i in array:
        if i not in x:
            x.append(i)
    for i in x:
        if array.count(i) > 1:
            y.append(i)
    return y
arr=[1,2,3,4,4,4,32,2,1]
print(duplicate(arr))

def min_value(array):
    min=array[0]
    for i in range(len(array)):
        if array[i]>min:
            min=array[i]
    return min 
array=[10,2,3,4,5]
print(min_value(array))

def even_odd(num):
    if num % 2 == 0:
        return "even"
    else:
        return "odd"
arr = [1,2,4,5,6]
for num in arr:
    print(f"{num} is {even_odd(num)}")
    
def even_or_odd(num):
    if num % 2 == 0:
        return "Even"
    else:
        return "Odd"

def missing_no(array):
    n=len(array)+1
    total_sum=(n*(n+1)) //2
    sum_of_array=sum(arr)
    miss_no = total_sum - sum_of_array
    return miss_no
arr=[1,2,3,4,5,6,8]
print(missing_no(arr))

def samllar_value(array ,x):
    count=0
    for i in range(len(array)):
        if array [i] < x:
            count+=1
    return count
arr=[1,2,3,2,22]
x=22
print(samllar_value(arr,x))

def alternate_value(array):
    for i in range(len(array)):
        if i % 2 ==0:
            print(array[i], end=" ")
array=[1,2,44,5,4,3]
alternate_value(array)
            
def print_numbers(n):
    if n > 0:
        print_numbers(n - 1)  # Recursive call to print numbers from 1 to n-1
        print(n)

# Example usage:
N = 10
print_numbers(N)


def rotate(array,n):
    i=0
    j=n-1
    while i != j:
        array[i],array[j]=array[j],array[i]
        i=i+1
    pass
array=[1,2,3,4,5]
n=len(array)
rotate(array, n) 
print ("rotatr array is")
for i in range(0, n):
    print (array[i], end = ' ')
    




def sumsqure_of_array(array):
    sum=0
    for i in range(len(array)):
        if i % 2 == 0:
            sum+=i**2
    return sum 

array=[1,2,3,4,5,6,7,8,9,10]
print(sumsqure_of_array(array))

def perfect_no(n):
    if n<=0:
        return False
    sum=0
    for i in range (1,n):
        if n % i == 0:
            sum += i
    return sum == n
n=28
print(perfect_no(n))


def sum_of_no(n):
    return n*(n+1)//2
n=15
print(sum_of_no(n))


class node():
    def __init__(self,item=None,next=None):
        self.item=item
        self.next=next
        
        
class ssl():
    def __init__(self , start=None):
        self.start = start 
    def is_empty(self):
        if self.start is None:
            return None
    def insert_at_first(self,data):
        N=node(data,self.start)
        self.start=N
    def insert_at_last(self,data):
        N=node(data)
        if not self.is_empty():
            temp=self.start
            while temp.next is not None:
                temp=temp.next
            temp.next=N
        else:
            self.start=N
    def search_element(self,data):
        temp=self.start
        while temp is not None:
            if temp.item==data:
                return temp
            temp=temp.next
        return None
    
    
    def print(self):
        temp=self.start
        while temp is not None:
            print(temp.item, end=" ")
            temp=temp.next
            
    def count_nodes(self):
        count = 0
        temp = self.start
        while temp is not None:
            count += 1
            temp = temp.next
        return count
    def insert_after(self,temp,data):
        if temp is not None:
            N=node(data,temp.next)
            temp.next=N
    
mylist=ssl()
mylist.insert_at_first(10)
mylist.insert_at_first(230)
mylist.insert_at_first(120)
mylist.insert_at_first(122)
mylist.insert_at_last(202)
mylist.print()
print(mylist.count_nodes())

def swap_first_two_number(array , n):
    maximum=array[0]
    if n>1:
        for i in range(0,n-1,2):
            array[i],array[i+1]=array[i+1],array[i]
        return maximum
array=[1,2,3,4,5,6]
n=len(array)
swap_first_two_number(array,n)
print(array)

def bubble_sort(array):
    for l in range(1,len(array)):
        for i in range(len(array)-1):
            if array[i]>array[i+1]:
                array[i],array[i+1]=array[i+1],array[i]
array=[12,222,332,444,53,54]
bubble_sort(array)
print(array)

def suo_of_array(array):
    suo=0
    for i in range(len(array)):
        suo+=array[i]
    return suo
array=[1,2,3,4,3,2,2]
print(suo_of_array(array))



def sum_of_element(arr, target):
    left = 0
    right = len(arr) - 1
    
    while left < right:
        curr_sum = arr[left] + arr[right]
        if curr_sum == target:
            return True
        elif curr_sum < target:
            left += 1
        else:
            right -= 1
    
    return False

arr = [1, 2, 3, 4, 5, 6, 7, 8]
target = 9
print(sum_of_element(arr, target))
